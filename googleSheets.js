const { google } = require("googleapis");
const axios = require("axios");

// ‚úÖ L·∫•y d·ªØ li·ªáu key‚Äìvalue t·ª´ sheet
async function getSheetData(sheetId, sheetName) {
    try {
        const auth = new google.auth.GoogleAuth({
            keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
            scopes: ["https://www.googleapis.com/auth/spreadsheets.readonly"],
        });

        const sheets = google.sheets({ version: "v4", auth });

        const response = await sheets.spreadsheets.values.get({
            spreadsheetId: sheetId,
            range: `${sheetName}!A:B`,
        });

        return response.data.values;
    } catch (err) {
        console.error("‚ùå L·ªói ƒë·ªçc Google Sheets:", err);
        return null;
    }
}

// ‚úÖ Append d·ªØ li·ªáu v√†o sheet (l∆∞u l·ªãch s·ª≠ chat)
async function appendSheetData(sheetId, sheetName, row) {
    try {
        const auth = new google.auth.GoogleAuth({
            keyFile: process.env.GOOGLE_APPLICATION_CREDENTIALS,
            scopes: ["https://www.googleapis.com/auth/spreadsheets"],
        });

        const sheets = google.sheets({ version: "v4", auth });

        await sheets.spreadsheets.values.append({
            spreadsheetId: sheetId,
            range: `${sheetName}!A:D`,
            valueInputOption: "RAW",
            resource: { values: [row] },
        });
    } catch (err) {
        console.error("‚ùå L·ªói ghi Google Sheets:", err);
    }
}
async function callGeminiWithSheet(userMessage, sheetData) {
    try {
        // T·∫°o knowledge base t·ª´ sheet
        const faqText = sheetData
            .map(row => `${row[0]}: ${row[1]}`)
            .join("\n");

        const prompt = `
B·∫°n l√† nh√¢n vi√™n t∆∞ v·∫•n b√°n h√†ng. 
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu t·ª´ Google Sheets:

${faqText}

Ng∆∞·ªùi d√πng h·ªèi: "${userMessage}"

üëâ Nhi·ªám v·ª•: Tr·∫£ l·ªùi t·ª± nhi√™n, l·ªãch s·ª±, gi·ªëng nh∆∞ nh√¢n vi√™n t∆∞ v·∫•n,
v√† ch·ªâ d·ª±a tr√™n d·ªØ li·ªáu trong Google Sheets. N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin, h√£y n√≥i "Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a c√≥ th√¥ng tin n√†y".
`;

        const res = await axios.post(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${process.env.GEMINI_API_KEY}`,
            { contents: [{ parts: [{ text: prompt }] }] }
        );

        return res.data.candidates?.[0]?.content?.parts?.[0]?.text || "Xin l·ªói, t√¥i kh√¥ng r√µ.";
    } catch (err) {
        console.error("‚ö†Ô∏è L·ªói AI:", err.response?.data || err.message);
        return "Xin l·ªói, t√¥i kh√¥ng r√µ.";
    }
}

module.exports = { getSheetData, appendSheetData, callGeminiWithSheet };
